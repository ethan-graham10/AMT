#!/bin/bash
#Script Name: ATM
#This script only holds up to 9999 bank accounts
#=====================================================================
# HEADER
#=====================================================================
#% DESCRIPTION
#%      This script creates an ATM System which:
#%              *Creates and holders users
#%              *Allows Users to Sign into the System
#%              *Allows for checking of balance
#%              *Creates a mini bank summary
#%              *Deposits and Withdraws funds
#=====================================================================

#==============Function Header======================================
# This function prints a mini bank statement
#
# This function will display the current users:
#               Name
#               Account Number
#               The current date
#               The current time
#               The users transaction history, up to the last five transactions
#
# (Params): None
#
# (Args): None
#
# (Key Side effects): None
#===================================================================
miniStatement() {
        if [[ $(cat transactionHistories/$currentAcctNum | wc -l) -gt 6 ]] ; then
                transHist=$(cat transactionHistories/$currentAcctNum | grep -w -v Balance | tail -5)
        else
                transHist=$(cat transactionHistories/$currentAcctNum | grep -w -v Balance)
        fi

        cat << EOF
        Your Mini-Account Statement

Account Name: $(grep $inputAcctNum accountsFile | cut -d":" -f2)
Account Number: $currentAcctNum

Date: $(date +%D)
Time: $(date +%R)

$(cat transactionHistories/$currentAcctNum | grep -w Balance)

Your transactions are: (up to your last 5)
$transHist
EOF
}

#==============Function Header======================================
# This function allows the user to deposit to their account
#
# This function will
#   Ask the user how much they would like to deposit
#   deposit the funds to their account
#   Add this transaction to their transaction history
#
# (Params): None
#
# (Args): None
#
# (Key Side effects):
#   transtionHistories/currentAcctNum:
#                       Function changes the balance of the file to the new balance
#                       with the current deposit.
#                       Appends a line to file representing the deposit.
#===================================================================
deposit() {
          read -p "How much would you like to deposit?: " depoAmt
                if [[ $depoAmt =~ ^[0-9]+$ ]] ; then
                balance=$(cat transactionHistories/$currentAcctNum | head -1 | cut -d":" -f2 | tr -d "[:space:]")
                        newBalance=$(($balance + $depoAmt));
                else
                        echo Please input a valid option
                        depoAmt;
                fi

  echo "Balance: $newBalance" > transactionHistories/"new"$currentAcctNum
        cat transactionHistories/$currentAcctNum | grep -w -v Balance >> transactionHistories/"new"$currentAcctNum
        rm transactionHistories/$currentAcctNum
        mv transactionHistories/"new"$currentAcctNum transactionHistories/$currentAcctNum
        echo +$depoAmt >> transactionHistories/$currentAcctNum

        echo Deposit Complete
}

#==============Function Header======================================
# This function allows the user to withdraw from their account
#
# This function will
#   Ask the user how much they would like to withdraw
#   Make sure that the user has the funds to withdraw
#               Withdraw the funds from their account
#   Add this transaction to their transaction history
#
#       (Params): None
#
# (Args): None
#
# (Key Side effects):
#   transtionHistories/currentAcctNum:
#     Function changes the balance of the file to the new balance
#       with the current withdraw.
#     Appends a line to file representing the deposit.
#===================================================================
withdraw() {
        cat << EOF

        How much would you like to withdraw? Please input option exactly as you see it.
        \$10, \$20, \$50, \$100, \$200, Other amount(simply input number),
        --back to main currently unavailable
EOF

        read -p ":" wdAmt
        balance=$(cat transactionHistories/$currentAcctNum | head -1 | cut -d":" -f2 | tr -d "[:space:]")

        while [[ ! $wdAmt =~ ^[0-9]+$ || $wdAmt -gt $balance ]]
        do
                echo "Please input a number that won't overdraft your account or 'Back to main'"
                read -p ":" wdAmt
        done

        newBalance=$(($balance - $wdAmt))

  echo "Balance: $newBalance" > transactionHistories/"new"$currentAcctNum
        cat transactionHistories/$currentAcctNum | grep -w -v Balance >> transactionHistories/"new"$currentAcctNum
        rm transactionHistories/$currentAcctNum
        mv transactionHistories/"new"$currentAcctNum transactionHistories/$currentAcctNum
  echo -$wdAmt >> transactionHistories/$currentAcctNum

        echo Withdraw Complete
}

#==============Function Header======================================
# This function acts as the navigation menu for a logged in user
#
# This function will
#   Display the users current balance
#   Allow the user to navigate to the Withdraw screen
#   Allow the user to navigate to the Deposit screen
#               Display a mini bank statement
#               Allow the user to logout back to the welcome screen
#
# (Params):
#               currentAcctNum : str
#                       The account number for the logged in user
#
# (Args): None
#
# (Key Side Effects): None
#===================================================================
userMenu() {
        currentAcctNum=$1
        name=$(grep $currentAcctNum accountsFile | cut -d":" -f2,3 | grep $currentAcctNum | cut -d":" -f1 )
        cat << EOF

  Welcome $name
        1) Display Balance
        2) Withdraw funds
        3) Deposit Funds
        4) Mini Statement
        5) Logout
EOF

        echo Please enter the corresponding number to the option you want
        read -p ":" option

        case $option in
                "1")
                        echo " "
                        echo $(cat transactionHistories/$currentAcctNum | head -1)
                        userMenu $currentAcctNum;;
                "2")
                        withdraw $currentAcctNum
                        userMenu $currentAcctNum;;
                "3")
                        deposit $currentAcctNum
                        userMenu $currentAcctNum;;
                "4")
                        miniStatement $currentAcctNum
                        userMenu $currentAcctNum;;
                "5")
                        welcomeScreen;;
                *)
                        echo "Please input a valid option"
                        userMenu $currentAcctNum;;
        esac
}

#==============Function Header======================================
# This function logs in existing users
#
# This function will
#   Ask the user for their account name and checks that it exists
#               Will only log in a user based on the pin associated with their
#       account
#
# (Params): None
#
#       (Args):
#               inputAcctNum : str
#                       Sends the account number for this login to the userMenu
#
#       (Key Side Effects): None
#===================================================================
userLogin() {
        read -p "Enter your accountNumber: " inputAcctNum
        actualAcctNum=$(cut -d":" -f3 accountsFile | grep -w $inputAcctNum)

        while [[ $actualAcctNum = "" ]]
        do
                read -p "Please enter a valid accountNumber: " inputAcctNum
                actualAcctNum=$(cut -d":" -f3 accountsFile | grep -w $inputAcctNum)
        done

        read -p "Enter your pin: " inputAcctPin
        actualAcctPin=$(cat accountsFile | cut -d":" -f1,3 | grep $inputAcctNum | cut -d":" -f1)

        while [[ ! $actualAcctPin -eq inputAcctPin ]]
        do
                read -p "Enter your pin CORRECTLY: " inputAcctPin
        done

  userMenu $inputAcctNum
}

#==============Function Header======================================
# This function creates new users
#
#       This function will
#               Create a new user with a first and last name
#               Create an account number for the user
#               Allow for the user to create their own pin
#               Create a transaction history for the user that includes
#                       the initial deposit made by the user
#
# (Params): None
#
#       (Args): None
#
# (Key Side Effects)
#               userAcctNum : str
#                       The account number for the user
#
#               transactionHistories : directory
#                       The directory that will hold the files used to hold the
#                       transaction history for each user
#
#               transactionHistories/$userTransactions : file
#               The file that holds the transaction history for the user
#
#       accountsFile : file
#                       Holds the account info for the users in the format:
#                       'pin:name of the user:account number:initial deposit'
#===================================================================
makeNewUser() {
        if [ ! -d ./transactionHistories ] ; then
                mkdir transactionHistories
        fi

        userPin=0

        read -p "Enter your first name: " firstName
        read -p "Enter your last name: " lastName
        fullName="$firstName""_""$lastName"

        read -p "Enter your initial deposit ammount: " depositAmt
        while [[ $userPin -lt 1000 || $userPin -gt 9999 ]]
        do
                echo  "Enter the 4 digit pin you will like to use"
                read userPin </dev/tty
        done

        userAcctNum=$(shuf -i 1000-9999 -n 1) #change the 9999 to how ever many users you want
        userAcctNum=$(($userAcctNum + 10010000)) #format of acctnum is 1001XXXX

        printf "\nYour account number is: $userAcctNum please remember it!\n\n"
        echo "$userPin:$fullName:$userAcctNum:$depositAmt" >> accountsFile #accoutsFile will only hold the intitial deposit not the current balance

        userTransactions="$userAcctNum"
        touch transactionHistories/$userTransactions
        echo "Balance: $depositAmt" >> transactionHistories/$userTransactions
        echo "+$depositAmt" >> transactionHistories/$userTransactions
}

#==============Function Header======================================
#       This function acts as the welcome screen for the user
#
# This function allows the user to either log in, create a new user,
#               or Exit the ATM all together.
#
# (Params): None
#
#       (Args): None
#
#       (Key Side Effects): None
#===================================================================

welcomeScreen() {
        echo Which would you like to do, Please input exactly as you see it?
        echo New User
        echo Existing User
        echo Exit ATM
        read -p ":" userAns

        case $userAns in
                "New User")
                        makeNewUser
                        welcomeScreen;;
                "Existing User")
                        userLogin ;;
                "Exit ATM")
                        printf "\nGoodbye!\n" #echo is faster than printf but printf can print newlines \n
                        exit;;
                *)
                        printf "\n-Please input a valid option-\n"
                        welcomeScreen;;
        esac
}

#run program
welcomeScreen
